import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler
)
from collections import Counter
from pymongo import MongoClient
from pymongo.errors import PyMongoError
import datetime

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
TOKEN = "7985454883:AAHRjwlYjVAA_rYZRJp2rzrIrBPiSV6Zu34"
ADMIN_ID = 1955422946
MONGO_URI = "mongodb://localhost:27017/"
DB_NAME = "telegram_shop_bot"

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB
try:
    client = MongoClient(MONGO_URI)
    db = client[DB_NAME]
    products_collection = db["products"]
    carts_collection = db["carts"]
    orders_collection = db["orders"]

    products_collection.create_index("product_id")
    carts_collection.create_index("user_id")
    orders_collection.create_index("user_id")

    logger.info("–£—Å–ø—ñ—à–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB")
except PyMongoError as e:
    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB: {e}")
    raise

# –°—Ç–∞–Ω–∏ –¥–ª—è ConversationHandler
CITY, POST_OFFICE = range(2)

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error("–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±–Ω–∏–∫—É: %s", context.error, exc_info=context.error)
    if isinstance(update, Update) and update.callback_query:
        try:
            await update.callback_query.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")
        except:
            pass

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE = None):
    try:
        keyboard = [
            [InlineKeyboardButton("üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥", callback_data="show_products")],
            [InlineKeyboardButton("üõí –ö–æ—à–∏–∫", callback_data="show_cart")],
            [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data="show_help")],
            [InlineKeyboardButton("‚ùå –í–∏–π—Ç–∏", callback_data="close_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if update.message:
            await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=reply_markup)
        elif update.callback_query:
            await update.callback_query.edit_message_text(
                "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
                reply_markup=reply_markup
            )
            await update.callback_query.answer()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ show_main_menu: {str(e)}")
        raise

async def close_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()
        await query.delete_message()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ close_menu: {str(e)}")
        raise

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.reply_text("–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –Ω–∞—à–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É!")
        await show_main_menu(update, context)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ start: {str(e)}")
        raise

async def show_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()

        categories = products_collection.distinct("category")

        if not categories:
            await query.edit_message_text("–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ")
            return

        buttons = [
            [InlineKeyboardButton(f" {cat.capitalize()}", callback_data=f"category_{cat}")]
            for cat in sorted(categories)
        ]
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])

        await query.edit_message_text(
            "–û–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω—É:",
            reply_markup=InlineKeyboardMarkup(buttons))
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ show_products: {str(e)}")
        await query.answer("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π")
        raise

async def show_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()

        category = query.data.split("_")[1]
        category_products = list(products_collection.find({"category": category}))

        if not category_products:
            await query.edit_message_text(f"–¢–æ–≤–∞—Ä–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{category}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ")
            return

        buttons = [
            [InlineKeyboardButton(
                f"{p['name']} - {p['price']}‚Ç¥",
                callback_data=f"product_{p['product_id']}"
            )]
            for p in category_products
        ]
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_products")])

        await query.edit_message_text(
            f"–ß–æ—Ö–ª–∏ –Ω–∞'{category}':",
            reply_markup=InlineKeyboardMarkup(buttons))
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ show_category: {str(e)}")
        await query.answer("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤")
        raise

async def view_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()

        product_id = int(query.data.split("_")[1])
        product = products_collection.find_one({"product_id": product_id})

        if not product:
            await query.edit_message_text("–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return

        buttons = [
            [InlineKeyboardButton("‚ûï –£ –∫–æ—à–∏–∫", callback_data=f"add_{product_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_category_{product['category']}")]


        ]

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ message_id –¥–ª—è –º–æ–∂–ª–∏–≤–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ
        context.user_data['last_product_message_id'] = query.message.message_id

        if product.get('photo'):
            try:
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–æ—Ç–æ
                sent_message = await context.bot.send_photo(
                    chat_id=query.message.chat_id,
                    photo=product['photo'],
                    caption=(
                        f" <b>{product['name']}</b>\n\n"
                        f"{product['description']}\n\n"
                        f"üíµ –¶—ñ–Ω–∞: <b>{product['price']}‚Ç¥</b>"
                    ),
                    reply_markup=InlineKeyboardMarkup(buttons),
                    parse_mode="HTML"
                )
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–æ—Ç–æ
                context.user_data['photo_message_id'] = sent_message.message_id
                # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤)
                await query.delete_message()
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {str(e)}")
                await query.edit_message_text(
                    f" <b>{product['name']}</b>\n\n"
                    f"{product['description']}\n\n"
                    f"üíµ –¶—ñ–Ω–∞: <b>{product['price']}‚Ç¥</b>",
                    reply_markup=InlineKeyboardMarkup(buttons),
                    parse_mode="HTML"
                )
        else:
            await query.edit_message_text(
                f" <b>{product['name']}</b>\n\n"
                f"{product['description']}\n\n"
                f"üíµ –¶—ñ–Ω–∞: <b>{product['price']}‚Ç¥</b>",
                reply_markup=InlineKeyboardMarkup(buttons),
                parse_mode="HTML"
            )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ view_product: {str(e)}")
        await query.answer("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É")
        raise

async def back_to_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()

        category = query.data.split("_")[-1]

        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–æ—Ç–æ, —è–∫—â–æ –≤–æ–Ω–æ —î
        if 'photo_message_id' in context.user_data:
            try:
                await context.bot.delete_message(
                    chat_id=query.message.chat_id,
                    message_id=context.user_data['photo_message_id']
                )
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–æ—Ç–æ: {str(e)}")

        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–≤–∞—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        category_products = list(products_collection.find({"category": category}))

        buttons = [
            [InlineKeyboardButton(
                f"{p['name']} - {p['price']}‚Ç¥",
                callback_data=f"product_{p['product_id']}"
            )]
            for p in category_products
        ]
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_products")])

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä—ñ–≤
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=f"–¢–æ–≤–∞—Ä–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{category}':",
            reply_markup=InlineKeyboardMarkup(buttons)
        )

        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—è–∫—â–æ —î)
        try:
            await query.delete_message()
        except:
            pass

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ back_to_category: {str(e)}")
        await query.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó")
        raise

async def add_to_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        product_id = int(query.data.split("_")[1])
        product = products_collection.find_one({"product_id": product_id})

        if not product:
            await query.answer("–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return

        user_id = query.from_user.id

        carts_collection.update_one(
            {"user_id": user_id},
            {"$push": {"items": product_id}},
            upsert=True
        )

        await query.answer(f"{product['name']} –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ add_to_cart: {str(e)}")
        await query.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–æ –∫–æ—à–∏–∫–∞")
        raise

async def show_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()

        user_id = query.from_user.id
        cart = carts_collection.find_one({"user_id": user_id})
        cart_items = cart.get("items", []) if cart else []

        if not cart_items:
            buttons = [
                [InlineKeyboardButton("üõçÔ∏è –î–æ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="show_products")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
            await query.edit_message_text(
                "üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π",
                reply_markup=InlineKeyboardMarkup(buttons))
            return

        cart_counter = Counter(cart_items)
        items_text = []
        total = 0
        buttons = []

        for product_id, count in cart_counter.items():
            product = products_collection.find_one({"product_id": product_id})
            if product:
                item_total = product['price'] * count
                items_text.append(f"‚ñ™ {product['name']} √ó{count} - {item_total}‚Ç¥")
                total += item_total
                buttons.append([
                    InlineKeyboardButton(
                        f"‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ {product['name']}",
                        callback_data=f"remove_{product_id}"
                    )
                ])

        buttons.extend([
            [InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="order")],
            [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫", callback_data="clear_cart")],
            [InlineKeyboardButton("üõçÔ∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø–æ–∫—É–ø–∫–∏", callback_data="show_products")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])

        await query.edit_message_text(
            "üõí <b>–í–∞—à –∫–æ—à–∏–∫:</b>\n\n" +
            "\n".join(items_text) +
            f"\n\nüíµ <b>–í—Å—å–æ–≥–æ: {total}‚Ç¥</b>",
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ show_cart: {str(e)}")
        await query.answer("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—à–∏–∫–∞")
        raise

async def remove_from_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        product_id = int(query.data.split("_")[1])
        user_id = query.from_user.id

        result = carts_collection.update_one(
            {"user_id": user_id},
            {"$pull": {"items": product_id}}
        )

        if result.modified_count > 0:
            await query.answer("–¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∫–æ—à–∏–∫–∞")
            await show_cart(update, context)
        else:
            await query.answer("–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ—à–∏–∫—É")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ remove_from_cart: {str(e)}")
        await query.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É")
        raise

async def clear_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        user_id = query.from_user.id

        carts_collection.delete_one({"user_id": user_id})

        await query.answer("–ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ")
        await show_cart(update, context)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ clear_cart: {str(e)}")
        await query.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –∫–æ—à–∏–∫–∞")
        raise

async def start_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()

        user_id = query.from_user.id
        cart = carts_collection.find_one({"user_id": user_id})
        cart_items = cart.get("items", []) if cart else []

        if not cart_items:
            await query.answer("–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π")
            return

        context.user_data["cart_items"] = cart_items.copy()
        context.user_data["user_info"] = {
            "name": query.from_user.full_name,
            "username": query.from_user.username,
            "id": user_id
        }

        await query.edit_message_text(
            " <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b>\n\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∏:",
            parse_mode="HTML"
        )

        return CITY
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ start_order: {str(e)}")
        await query.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
        return ConversationHandler.END

async def process_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.message.from_user.id
        city = update.message.text.strip()

        if not city:
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∏:")
            return CITY

        context.user_data["delivery_city"] = city

        await update.message.reply_text(
            "–í–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–æ–≤–æ—ó –ø–æ—à—Ç–∏ —É –≤–∞—à–æ–º—É –º—ñ—Å—Ç—ñ:"
        )

        return POST_OFFICE
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ process_city: {str(e)}")
        await update.message.reply_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")
        return CITY

async def process_post_office(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.message.from_user.id
        post_office = update.message.text.strip()

        if not post_office.isdigit():
            await update.message.reply_text(
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç—ñ–ª—å–∫–∏ –Ω–æ–º–µ—Ä –ø–æ—à—Ç–æ–≤–æ–≥–æ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è (—Ü–∏—Ñ—Ä–∏). –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
            return POST_OFFICE

        data = context.user_data
        cart_items = data["cart_items"]
        cart_products = list(products_collection.find({"product_id": {"$in": cart_items}}))

        cart_counter = Counter(cart_items)
        order_details = []
        total = 0

        for product in cart_products:
            count = cart_counter[product["product_id"]]
            item_total = product['price'] * count
            order_details.append(f"{product['name']} √ó{count} - {item_total}‚Ç¥")
            total += item_total

        user_info_text = (
            f"üë§ <b>–ü–æ–∫—É–ø–µ—Ü—å:</b>\n"
            f"‚Ä¢ –Ü–º'—è: {data['user_info']['name']}\n"
            f"‚Ä¢ –Æ–∑–µ—Ä–Ω–µ–π–º: @{data['user_info']['username'] if data['user_info']['username'] else '–Ω–µ–º–∞—î'}\n"
            f"‚Ä¢ ID: {data['user_info']['id']}\n\n"
            f"üöö <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b>\n"
            f"‚Ä¢ –ú—ñ—Å—Ç–æ: {data['delivery_city']}\n"
            f"‚Ä¢ –ü–æ—à—Ç–æ–≤–µ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è: {post_office}\n\n"
        )

        order_info = (
                f"üõí <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>\n" +
                "\n".join(order_details) +
                f"\n\nüíµ <b>–í—Å—å–æ–≥–æ: {total}‚Ç¥</b>"
        )

        order_data = {
            "user_id": user_id,
            "user_info": data["user_info"],
            "delivery_info": {
                "city": data["delivery_city"],
                "post_office": post_office
            },
            "items": [{"product_id": pid, "quantity": q} for pid, q in cart_counter.items()],
            "total": total,
            "status": "new",
            "created_at": datetime.datetime.now()
        }
        orders_collection.insert_one(order_data)

        carts_collection.delete_one({"user_id": user_id})

        try:
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"üÜï <b>–ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø</b>\n\n{user_info_text}{order_info}",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É: {str(e)}")

        await update.message.reply_text(
            "‚úÖ <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!</b>\n\n" +
            user_info_text +
            order_info +
            "\n\n–î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ú–∏ —Å–∫–æ—Ä–æ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏.",
            parse_mode="HTML"
        )

        context.user_data.clear()

        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ process_post_office: {str(e)}")
        await update.message.reply_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")
        return POST_OFFICE

async def cancel_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if "cart_items" in context.user_data:
            context.user_data.clear()

        await update.message.reply_text(
            "‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–£ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_main")]])
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ cancel_order: {str(e)}")

    return ConversationHandler.END

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()

        buttons = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]

        await query.edit_message_text(
            "‚ÑπÔ∏è <b>–î–æ–ø–æ–º–æ–≥–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
            "–Ø–∫—â–æ —î –ø–∏—Ç–∞–Ω–Ω—è,–ø–∏—à—ñ—Ç—å —Å—é–¥–∏‚û°Ô∏è —Ç–≥-@mimimishak\n",
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ show_help: {str(e)}")
        await query.answer("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ–≤—ñ–¥–∫–∏")
        raise

async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()
        await show_main_menu(update, context)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ back_to_main: {str(e)}")
        await query.answer("–ü–æ–º–∏–ª–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –º–µ–Ω—é")
        raise

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é")
        await show_main_menu(update, context)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ handle_message: {str(e)}")
        raise

def main():
    try:
        application = Application.builder().token(TOKEN).build()

        application.add_error_handler(error_handler)

        order_conv_handler = ConversationHandler(
            entry_points=[CallbackQueryHandler(start_order, pattern="^order$")],
            states={
                CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_city)],
                POST_OFFICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_post_office)]
            },
            fallbacks=[
                CommandHandler('cancel', cancel_order),
                MessageHandler(filters.COMMAND, cancel_order)
            ]
        )

        application.add_handler(CommandHandler("start", start))
        application.add_handler(order_conv_handler)

        handlers = [
            CallbackQueryHandler(show_products, pattern="^show_products$"),
            CallbackQueryHandler(show_category, pattern="^category_"),
            CallbackQueryHandler(view_product, pattern="^product_"),
            CallbackQueryHandler(back_to_category, pattern="^back_to_category_"),
            CallbackQueryHandler(add_to_cart, pattern="^add_"),
            CallbackQueryHandler(show_cart, pattern="^show_cart$"),
            CallbackQueryHandler(clear_cart, pattern="^clear_cart$"),
            CallbackQueryHandler(remove_from_cart, pattern="^remove_"),
            CallbackQueryHandler(show_help, pattern="^show_help$"),
            CallbackQueryHandler(back_to_main, pattern="^back_to_main$"),
            CallbackQueryHandler(close_menu, pattern="^close_menu$")
        ]

        for handler in handlers:
            application.add_handler(handler)

        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
        application.run_polling()
    except Exception as e:
        logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {str(e)}")

if __name__ == "__main__":
    main()